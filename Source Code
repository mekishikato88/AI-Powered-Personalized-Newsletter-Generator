import feedparser
import nltk
from nltk.tokenize import sent_tokenize
from nltk.corpus import stopwords
import os

# Ensure required NLTK packages are downloaded
nltk.download('punkt')
nltk.download('stopwords')

# User-defined RSS feeds and categories
USER_PERSONAS = {
    "Alex Parker": {
        "Sources": {
            "Technology": ["https://rss.nytimes.com/services/xml/rss/nyt/Technology.xml"],
            "Business": ["https://rss.nytimes.com/services/xml/rss/nyt/Business.xml"],
            "Sports": ["https://www.espn.com/espn/rss/news"]
        }
    }
}

def fetch_news(rss_urls):
    """Fetches and parses news articles from RSS feeds."""
    articles = []
    for url in rss_urls:
        feed = feedparser.parse(url)
        for entry in feed.entries[:3]:  # Fetch top 3 articles per feed
            articles.append({
                "title": entry.title,
                "summary": entry.summary,
                "link": entry.link
            })
    return articles

def summarize_text(text, num_sentences=2):
    """Summarize the given text by extracting key sentences."""
    sentences = sent_tokenize(text)
    return " ".join(sentences[:num_sentences]) if len(sentences) > num_sentences else text

def generate_newsletter(user_name):
    """Generates a markdown-based personalized newsletter."""
    user_data = USER_PERSONAS.get(user_name)
    if not user_data:
        return "User not found!"
    
    newsletter_content = f"# ðŸ“¢ {user_name}'s AI-Powered Newsletter\n\n"
    newsletter_content += "## ðŸ”¥ Top News Highlights\n\n"
    
    for category, feeds in user_data["Sources"].items():
        newsletter_content += f"## {category} News\n\n"
        articles = fetch_news(feeds)

        for article in articles:
            summary = summarize_text(article["summary"])
            newsletter_content += f"### [{article['title']}]({article['link']})\n{summary}\n\n"

    # Save as Markdown file
    file_name = f"{user_name.replace(' ', '_').lower()}_newsletter.md"
    with open(file_name, "w", encoding="utf-8") as f:
        f.write(newsletter_content)
    
    return f"âœ… Newsletter for {user_name} generated! Check `{file_name}`."

# Example usage
if __name__ == "__main__":
    print(generate_newsletter("Alex Parker"))
